pragma solidity >0.4.0;

contract Ballot{
    
    struct Voter{
        uint weight;
        bool voted; 
        uint8 vote;
        address delegate;
    }
    
    struct Proposal{
        uint voteCount;
    }
    
    address public chairperson;
    
    mapping(address => Voter) voters;
    
    Proposal[] proposals;
    
    constructor(uint8 _numProposals) public {
        chairperson = msg.sender;
        voters[chairperson].weight = 1;
        proposals.length = _numProposals;
    }
    
    function giveRightToVote(address toVoter) public {
        require(msg.sender == chairperson);
        require(voters[toVoter].voted == false);
        require(voters[toVoter].weight == 0);
        voters[toVoter].weight = 1;
    }
    
    function delegate(address to) public {
        Voter storage sender = voters[msg.sender];
        require(!sender.voted);
        require(to != msg.sender);
        while(voters[to].delegate != address(0) && voters[to].delegate != msg.sender){
            to = voters[to].delegate;
        }
    require(to != msg.sender);
        sender.voted = true;
        sender.delegate = to;
        Voter storage delegateTo = voters[to];
        if (delegateTo.voted)
            proposals[delegateTo.vote].voteCount += sender.weight;
        else
            delegateTo.weight += sender.weight;
    }
    
    function vote(uint8 toProposal) public {
        Voter storage sender = voters[msg.sender];
        if (sender.voted || toProposal >= proposals.length) return;
        sender.voted = true;
        sender.vote = toProposal;
        proposals[toProposal].voteCount += sender.weight;
    }
    
    function winningProposal() public view returns (uint8 _winingProposal) {
        uint256 winningVoteCount = 0;
        for(uint8 prop = 0;prop < proposals.length; prop++)
            if (proposals[prop].voteCount > winningVoteCount) {
                winningVoteCount = proposals[prop].voteCount;
                _winingProposal = prop;
            }
    }
    
}